/**
 * This file is the axios.js file that gets generated by NuxtJS.
 * We should see which configurations we want to keep here and remove the rest.
 */

import Axios from 'axios'
import { isNil } from 'lodash'
import i18n from './i18n'

// Axios.prototype cannot be modified
const axiosExtra = {
  setHeader(name, value, scopes = 'common') {
    for (let scope of Array.isArray(scopes) ? scopes : [scopes]) {
      if (!value) {
        delete this.defaults.headers[scope][name]
        return
      }
      this.defaults.headers[scope][name] = value
    }
  },
  setLanguage(language) {
    if (!isNil(language)) {
      this.defaults.headers.common['Accept-Language'] = language
    } else {
      delete this.defaults.headers.common['Accept-Language']
    }
  },
  onRequest(fn) {
    this.interceptors.request.use(config => fn(config) || config)
  },
  onResponse(fn) {
    this.interceptors.response.use(response => fn(response) || response)
  },
  onRequestError(fn) {
    this.interceptors.request.use(
      undefined,
      error => fn(error) || Promise.reject(error)
    )
  },
  onResponseError(fn) {
    this.interceptors.response.use(
      undefined,
      error => fn(error) || Promise.reject(error)
    )
  },
  onError(fn) {
    this.onRequestError(fn)
    this.onResponseError(fn)
  }
}

// Request helpers ($get, $post, ...)
for (let method of [
  'request',
  'delete',
  'get',
  'head',
  'options',
  'post',
  'put',
  'patch'
]) {
  axiosExtra['$' + method] = function() {
    return this[method].apply(this, arguments).then(res => res && res.data)
  }
}

const extendAxiosInstance = axios => {
  for (let key in axiosExtra) {
    axios[key] = axiosExtra[key].bind(axios)
  }
}

const setupProgress = axios => {
  // A noop loading inteterface for when $nuxt is not yet ready
  const noopLoading = {
    finish: () => {},
    start: () => {},
    fail: () => {},
    set: () => {}
  }

  const $loading = () =>
    window.app && window.app.$loading && window.app.$loading.set
      ? window.app.$loading
      : noopLoading

  let currentRequests = 0

  axios.onRequest(config => {
    if (config && config.progress === false) {
      return
    }

    currentRequests++
  })

  axios.onResponse(response => {
    if (response && response.config && response.config.progress === false) {
      return
    }

    currentRequests--
    if (currentRequests <= 0) {
      currentRequests = 0
      $loading().finish()
    }
  })

  axios.onError(error => {
    if (error && error.config && error.config.progress === false) {
      return
    }

    currentRequests--
    $loading().fail()
    $loading().finish()
  })

  const onProgress = e => {
    if (!currentRequests) {
      return
    }
    const progress = (e.loaded * 100) / (e.total * currentRequests)
    $loading().set(Math.min(100, progress))
  }

  axios.defaults.onUploadProgress = onProgress
  axios.defaults.onDownloadProgress = onProgress
  axios.defaults.xsrfCookieName = 'csrftoken'
  axios.defaults.xsrfHeaderName = 'x-csrftoken'
}

const baseURL = process.env.VUE_APP_BACKEND_URL + 'api/v1'
const axiosOptions = { baseURL }
const axios = Axios.create(axiosOptions)

extendAxiosInstance(axios)
// Setup interceptors
setupProgress(axios)
axios.setLanguage(i18n.locale)

export default axios
